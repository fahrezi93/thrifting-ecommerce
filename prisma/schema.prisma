// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for better type safety
enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  FAILED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  EXPIRED
}

model User {
  id            String    @id // Firebase UID
  name          String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          UserRole  @default(USER)
  phone         String?
  password      String?
  cartData      String?   // JSON string for cart items
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  addresses Address[]
  orders    Order[]
  wishlistItems WishlistItem[]
}


model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}


model Address {
  id         String @id @default(cuid())
  name       String
  street     String
  city       String
  state      String
  postalCode String
  country    String @default("Indonesia")
  phone      String?
  isDefault  Boolean @default(false)
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@index([slug])
  @@index([isActive])
}

model Product {
  id          String          @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrls   String // JSON string array
  categoryId  String
  size        String
  condition   String
  brand       String?
  color       String?
  stock       Int             @default(1)
  isActive    Boolean         @default(true)
  isFeatured  Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  wishlistItems WishlistItem[]

  @@index([categoryId])
  @@index([price])
  @@index([createdAt])
  @@index([isFeatured])
}

model Order {
  id                    String      @id @default(cuid())
  orderNumber           String      @unique @default(cuid())
  totalAmount           Float
  shippingCost          Float       @default(0)
  status                OrderStatus @default(PENDING)
  paymentMethod         String?
  midtransTransactionId String?     @unique
  userId                String
  shippingAddressId     String
  notes                 String?
  paidAt                DateTime?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  user            User        @relation(fields: [userId], references: [id])
  shippingAddress Address     @relation(fields: [shippingAddressId], references: [id])
  orderItems      OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  productId String

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model Payment {
  id               String        @id @default(cuid())
  orderId          String
  transactionId    String        @unique
  paymentMethod    String
  amount           Float
  status           PaymentStatus @default(PENDING)
  midtransResponse String?       // JSON string
  expiresAt        DateTime
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([orderId])
  @@index([transactionId])
  @@index([status])
}
