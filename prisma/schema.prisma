// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for better type safety
enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  FAILED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  EXPIRED
}

model User {
  id            String    @id // Firebase UID
  name          String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          UserRole  @default(USER)
  phone         String?
  address       String?
  password      String?
  cartData      String?   // JSON string for cart items
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  addresses Address[]
  orders    Order[]
  wishlistItems WishlistItem[]
  notifications Notification[]
  reviews   Review[]
  preferences UserPreferences?
  contactMessages ContactMessage[]
  pushSubscriptions PushSubscription[]
}


model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}


model Address {
  id         String @id @default(cuid())
  name       String
  street     String
  city       String
  state      String
  postalCode String
  country    String @default("Indonesia")
  phone      String?
  isDefault  Boolean @default(false)
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@index([slug])
  @@index([isActive])
}

model Product {
  id          String          @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrls   String // JSON string array
  categoryId  String
  size        String
  condition   String
  brand       String?
  color       String?
  stock       Int             @default(1)
  isActive    Boolean         @default(true)
  isFeatured  Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  reviews    Review[]
  wishlistItems WishlistItem[]

  @@index([categoryId])
  @@index([price])
  @@index([createdAt])
  @@index([isFeatured])
}

model Order {
  id                    String      @id @default(cuid())
  orderNumber           String      @unique @default(cuid())
  totalAmount           Float
  shippingCost          Float       @default(0)
  status                OrderStatus @default(PENDING)
  paymentMethod         String?
  dokuTransactionId     String?     @unique
  userId                String
  shippingAddressId     String
  notes                 String?
  paidAt                DateTime?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  user            User        @relation(fields: [userId], references: [id])
  shippingAddress Address     @relation(fields: [shippingAddressId], references: [id])
  orderItems      OrderItem[]
  payments        Payment[]
  paymentLogs     PaymentLog[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  productId String

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  reviews Review[]

  @@unique([orderId, productId])
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  comment     String?
  userId      String
  productId   String
  orderItemId String
  adminReply  String?  // Admin response to review
  repliedBy   String?  // Admin user ID who replied
  repliedAt   DateTime? // When admin replied
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@unique([userId, orderItemId]) // One review per user per order item
  @@index([productId])
  @@index([rating])
  @@index([createdAt])
}

model Payment {
  id               String        @id @default(cuid())
  orderId          String
  transactionId    String        @unique
  paymentMethod    String
  amount           Float
  status           PaymentStatus @default(PENDING)
  dokuResponse     String?       // JSON string
  expiresAt        DateTime
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([transactionId])
  @@index([status])
}

model PaymentLog {
  id        String   @id @default(cuid())
  orderId   String
  provider  String   // DOKU, etc
  status    String   // Payment status from provider
  amount    Float
  response  String   // JSON response from provider
  createdAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([provider])
  @@index([status])
}

model StoreSettings {
  id                String   @id @default("store") // Single row table
  storeName         String   @default("Thrift Haven")
  storeDescription  String   @default("Sustainable fashion for the conscious shopper. Discover unique, quality pre-loved clothing.")
  storeEmail        String   @default("hello@thrifthaven.com")
  storePhone        String   @default("+62 123 456 7890")
  storeAddress      String   @default("Jakarta, Indonesia")
  supportEmail      String   @default("support@thrifthaven.com")
  businessHours     String   @default("Mon-Sun, 9 AM - 9 PM")
  isStoreActive     Boolean  @default(true)
  allowRegistration Boolean  @default(true)
  maintenanceMode   Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   // ID pengguna yang akan menerima notifikasi
  title     String   // Judul notifikasi
  message   String   // Isi pesan, misal: "Pesanan baru #123 telah dibuat!"
  type      String   @default("info") // Tipe notifikasi: info, promo, order, etc.
  url       String?  // URL untuk dikunjungi saat notifikasi diklik
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([type])
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String   // ID pengguna yang memiliki subscription
  endpoint  String   @unique
  p256dh    String
  auth      String
  userAgent String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([endpoint])
  @@index([isActive])
}

model UserPreferences {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Notification preferences
  emailNotifications Boolean  @default(true)
  orderUpdates      Boolean  @default(true)
  promotions        Boolean  @default(false)
  
  // Privacy preferences
  profileVisibility Boolean  @default(true)
  dataSharing       Boolean  @default(false)
  
  // Theme preferences
  theme             String   @default("light") // "light", "dark", "system"
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?  // Optional phone number
  subject   String
  message   String
  status    ContactStatus @default(PENDING)
  userId    String?  // Optional - if user is logged in
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

